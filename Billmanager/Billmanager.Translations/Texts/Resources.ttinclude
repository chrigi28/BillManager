<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".Designer.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#+
public void GenerateResources(string inputFilePath, string namespaceName, bool imageSource = false) 
{
        string className = Path.GetFileNameWithoutExtension(inputFilePath);
        var provider = new CSharpCodeProvider();

        SetCurrentDirectory();
        if (File.Exists(inputFilePath))
        {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Reflection;

namespace  <#=namespaceName#> {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class <#=className#> {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;

        private static Assembly assembly = typeof(<#=className#>).GetTypeInfo().Assembly;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal <#=className#>() {            
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("<#=namespaceName#>.<#=className#>", assembly);
                    resourceMan = temp;
                    resourceCulture = global::System.Globalization.CultureInfo.CurrentUICulture;
                }
                return resourceMan;
            }
            set {
                resourceMan = value;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
                resourceMan = null;
            }
        }
<#+
        foreach (var resxEntry in GetResourceKeys(inputFilePath))
        {
                var name = resxEntry.Name;
                if (imageSource)
                {
                    var index = resxEntry.Value.IndexOf(';');
                    var imageName = resxEntry.Value.Substring(0, index);
#>
        /// <summary>Looks up a localized string similar to <#= CreateEscapedIdentifier(provider, name) #>.</summary>
        public static Xamarin.Forms.ImageSource <#= CreateEscapedIdentifier(provider, name) #> => Xamarin.Forms.ImageSource.FromResource("<#=namespaceName#>.<#=imageName#>", assembly);
<#+
                }
                else
                {
#>
        /// <summary>Looks up a localized string similar to <#= CreateEscapedIdentifier(provider, name) #>.</summary>
        public static string <#= CreateEscapedIdentifier(provider, name) #> => ResourceManager.GetString("<#=name#>", resourceCulture);       
<#+
                }
            }
#>
    }
}
<#+
        }
        else
        {
            throw new FileNotFoundException(String.Format("Unable to find Resource file: {0}", inputFilePath));
        }
    }

    private string CreateEscapedIdentifier(CSharpCodeProvider provider, string name)
    {
        name = name.Replace(".","_");
        return provider.CreateEscapedIdentifier(name);
    }

    private void SetCurrentDirectory() {
        Directory.SetCurrentDirectory(Host.ResolvePath(""));
    }   

    private static IEnumerable<ResxEntry> GetResourceKeys(string filePath) {
        XDocument doc = XDocument.Load(filePath);
        return doc.Root.Elements("data").Select(e => new ResxEntry()
        {
            Name = e.Attribute("name").Value,
            Value = e.Elements("value").First().Value,
        });
    }

    public class ResxEntry
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }
#>